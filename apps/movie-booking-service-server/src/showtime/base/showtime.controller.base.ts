/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ShowtimeService } from "../showtime.service";
import { ShowtimeCreateInput } from "./ShowtimeCreateInput";
import { Showtime } from "./Showtime";
import { ShowtimeFindManyArgs } from "./ShowtimeFindManyArgs";
import { ShowtimeWhereUniqueInput } from "./ShowtimeWhereUniqueInput";
import { ShowtimeUpdateInput } from "./ShowtimeUpdateInput";

export class ShowtimeControllerBase {
  constructor(protected readonly service: ShowtimeService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Showtime })
  async createShowtime(
    @common.Body() data: ShowtimeCreateInput
  ): Promise<Showtime> {
    return await this.service.createShowtime({
      data: data,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Showtime] })
  @ApiNestedQuery(ShowtimeFindManyArgs)
  async showtimes(@common.Req() request: Request): Promise<Showtime[]> {
    const args = plainToClass(ShowtimeFindManyArgs, request.query);
    return this.service.showtimes({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Showtime })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async showtime(
    @common.Param() params: ShowtimeWhereUniqueInput
  ): Promise<Showtime | null> {
    const result = await this.service.showtime({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Showtime })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateShowtime(
    @common.Param() params: ShowtimeWhereUniqueInput,
    @common.Body() data: ShowtimeUpdateInput
  ): Promise<Showtime | null> {
    try {
      return await this.service.updateShowtime({
        where: params,
        data: data,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Showtime })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteShowtime(
    @common.Param() params: ShowtimeWhereUniqueInput
  ): Promise<Showtime | null> {
    try {
      return await this.service.deleteShowtime({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Post("/showtime")
  @swagger.ApiOkResponse({
    type: Showtime,
  })
  @swagger.ApiNotFoundResponse({
    type: errors.NotFoundException,
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async CreateShowtime(
    @common.Body()
    body: UpdateShowtimeArgs
  ): Promise<Showtime> {
    return this.service.CreateShowtime(body);
  }

  @common.Delete("/showtime/:id")
  @swagger.ApiOkResponse({
    type: String,
  })
  @swagger.ApiNotFoundResponse({
    type: errors.NotFoundException,
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async DeleteShowtime(
    @common.Body()
    body: UpdateShowtimeArgs
  ): Promise<string> {
    return this.service.DeleteShowtime(body);
  }

  @common.Put("/showtime/:id")
  @swagger.ApiOkResponse({
    type: Showtime,
  })
  @swagger.ApiNotFoundResponse({
    type: errors.NotFoundException,
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async UpdateShowtime(
    @common.Body()
    body: UpdateShowtimeArgs
  ): Promise<Showtime> {
    return this.service.UpdateShowtime(body);
  }
}
