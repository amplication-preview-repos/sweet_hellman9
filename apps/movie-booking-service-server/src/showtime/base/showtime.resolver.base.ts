/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Showtime } from "./Showtime";
import { ShowtimeCountArgs } from "./ShowtimeCountArgs";
import { ShowtimeFindManyArgs } from "./ShowtimeFindManyArgs";
import { ShowtimeFindUniqueArgs } from "./ShowtimeFindUniqueArgs";
import { DeleteShowtimeArgs } from "./DeleteShowtimeArgs";
import { ShowtimeCreateInput } from "./ShowtimeCreateInput";
import { ShowtimeService } from "../showtime.service";
@graphql.Resolver(() => Showtime)
export class ShowtimeResolverBase {
  constructor(protected readonly service: ShowtimeService) {}

  async _showtimesMeta(
    @graphql.Args() args: ShowtimeCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Showtime])
  async showtimes(
    @graphql.Args() args: ShowtimeFindManyArgs
  ): Promise<Showtime[]> {
    return this.service.showtimes(args);
  }

  @graphql.Query(() => Showtime, { nullable: true })
  async showtime(
    @graphql.Args() args: ShowtimeFindUniqueArgs
  ): Promise<Showtime | null> {
    const result = await this.service.showtime(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Showtime)
  async deleteShowtime(
    @graphql.Args() args: DeleteShowtimeArgs
  ): Promise<Showtime | null> {
    try {
      return await this.service.deleteShowtime(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Showtime)
  async CreateShowtime(
    @graphql.Args()
    args: ShowtimeCreateInput
  ): Promise<Showtime> {
    return this.service.CreateShowtime(args);
  }

  @graphql.Mutation(() => String)
  async DeleteShowtime(
    @graphql.Args()
    args: string
  ): Promise<string> {
    return this.service.DeleteShowtime(args);
  }

  @graphql.Mutation(() => Showtime)
  async UpdateShowtime(
    @graphql.Args()
    args: UpdateShowtimeArgs
  ): Promise<Showtime> {
    return this.service.UpdateShowtime(args);
  }
}
