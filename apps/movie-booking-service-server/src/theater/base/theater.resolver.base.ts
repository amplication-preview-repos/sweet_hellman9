/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Theater } from "./Theater";
import { TheaterCountArgs } from "./TheaterCountArgs";
import { TheaterFindManyArgs } from "./TheaterFindManyArgs";
import { TheaterFindUniqueArgs } from "./TheaterFindUniqueArgs";
import { DeleteTheaterArgs } from "./DeleteTheaterArgs";
import { TheaterService } from "../theater.service";
@graphql.Resolver(() => Theater)
export class TheaterResolverBase {
  constructor(protected readonly service: TheaterService) {}

  async _theatersMeta(
    @graphql.Args() args: TheaterCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Theater])
  async theaters(
    @graphql.Args() args: TheaterFindManyArgs
  ): Promise<Theater[]> {
    return this.service.theaters(args);
  }

  @graphql.Query(() => Theater, { nullable: true })
  async theater(
    @graphql.Args() args: TheaterFindUniqueArgs
  ): Promise<Theater | null> {
    const result = await this.service.theater(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Theater)
  async deleteTheater(
    @graphql.Args() args: DeleteTheaterArgs
  ): Promise<Theater | null> {
    try {
      return await this.service.deleteTheater(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
